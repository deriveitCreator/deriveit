export const title="Chinese Remainder Theorem, deriving the solution";
const content = [
  ['h1', 'Deriving The Solution For The Chinese Remainder Theorem'],
  ['pmain', 'Suppose we have a system of congruences with different moduli:'],
  ['displayFormula', '$$ x ≡ b_1 \\mod n_1, x ≡ b_2 \\mod n_2, $$ $$ \\ldots, x ≡ b_k \\mod n_k $$'],
  ['pmain', 'The \\(gcd\\) of all \\(n_i\\) pairs is 1. Let\'s define \\(N\\) as:'],
  ['displayFormula', '$$ N = n_1 n_2 n_3 \\ldots n_k $$'],
  ['pmain', 'And let\'s define \\(N_i\\) as:'],
  ['displayFormula', '$$ N_i = \\frac{N}{n_i} $$'],
  ['pmain', '\\(N_3\\) is the multiplication of all \\(n_i\\) except \\(n_3\\). Since \\((n_1, n_3)=1\\) and \\((n_2, n_3)=1\\), then \\((n_1n_2, n_3)=1\\) using <a href="https://www.deriveit.net/discrete_mathematics/divisibility_and_gcd/multiplicative">this lemma</a>. This way we can also derive \\((n_1n_2n_4, n_3)=1\\), and we can further say \\((N_3,n_3)=1\\). By similar reasoning, we can say the same for any \\(N_i\\):'],
  ['displayFormula', '$$ (N_i, n_i) = 1 $$'],
  ['pmain', 'Using <a href="https://www.deriveit.net/discrete_mathematics/modular_arithmetic/modular_inverse">using lemma</a>, we can conclude there exists an inverse:'],
  ['displayFormula', '$$ N_iN_i^{-1} ≡ 1 \\mod n_i $$'],
  ['pmain', 'Since \\(N_i\\) contains a factor of \\(n_j\\) where \\(i \\ne j\\), then:'],
  ['displayFormula', '$$ N_iN_i^{-1} ≡ 0 \\mod n_j $$'],
  ['pmain', 'Consider:'],
  ['displayFormula', '$$ A = N_1N_1^{-1}b_1 + N_2N_2^{-1}b_2 + \\ldots + N_kN_k^{-1}b_k $$'],
  ['pmain', 'If we take mod \\(n_1\\):'],
  ['displayFormula', '$$ A = b_1 + 0 + \\ldots + 0 $$'],
  ['pmain', 'If we take mod \\(n_2\\):'],
  ['displayFormula', '$$ A = 0 + b_2 + \\ldots + 0 $$'],
  ['pmain', 'If we take mod \\(n_k\\):'],
  ['displayFormula', '$$ A = 0 + 0 + \\ldots + b_k $$'],
  ['pmain', 'This means:'],
  ['displayFormula', '$$ A ≡ b_1 \\mod n_1, A ≡ b_2 \\mod n_2, $$ $$ \\ldots, A ≡ b_k \\mod n_k $$'],
  ['pmain', 'Which means \\(A\\) is a valid solution for \\(x\\). Now let \\(y ≡ b_i \\mod n_i\\), \\(x-y ≡ 0 \\mod n_i\\) If \\(n_1 | (x-y)\\), \\(n_2 | (x-y)\\), ..., \\(n_k | (x-y)\\), then using <a href="https://www.deriveit.net/discrete_mathematics/divisibility_and_gcd/gcdLemma14">this lemma</a> we can conclude \\(N|x-y\\), or:'],
  ['displayFormula', '$$ x ≡ y \\mod N $$'],
  ['pmain', 'This means that the solution is unique, meaning that there is only one solution modulo \\(N\\).'],
];
export default content;
